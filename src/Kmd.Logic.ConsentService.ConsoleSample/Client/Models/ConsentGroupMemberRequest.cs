// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.ConsentService.ConsoleSample.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ConsentGroupMemberRequest
    {
        /// <summary>
        /// Initializes a new instance of the ConsentGroupMemberRequest class.
        /// </summary>
        public ConsentGroupMemberRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConsentGroupMemberRequest class.
        /// </summary>
        public ConsentGroupMemberRequest(string key, string name, System.Guid subscriptionId, ConsentRolesRequestResponse roles = default(ConsentRolesRequestResponse))
        {
            Key = key;
            Name = name;
            SubscriptionId = subscriptionId;
            Roles = roles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "key")]
        public string Key { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subscriptionId")]
        public System.Guid SubscriptionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "roles")]
        public ConsentRolesRequestResponse Roles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Key == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Key");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
