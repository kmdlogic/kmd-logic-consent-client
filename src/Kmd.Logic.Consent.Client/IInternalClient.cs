// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Consent.Client
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    internal partial interface IInternalClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Get the complete details of consent
        /// </summary>
        /// <remarks>
        /// The requesting member must have both Read and Write permissions to
        /// use this method.
        ///
        /// For a member to get consent details for operational use, use the
        /// route:
        /// subscriptions/{subscriptionId}/consents/{consentGroupId}/{key}/{member}
        /// </remarks>
        /// <param name='subscriptionId'>
        /// The subscription with access to the consent group
        /// </param>
        /// <param name='consentGroupId'>
        /// The consent group being requested
        /// </param>
        /// <param name='key'>
        /// The consent key being requested
        /// </param>
        /// <param name='member'>
        /// The consent group member requesting access
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetConsentWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid consentGroupId, string key, string member, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create or update the details of consent
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription with access to the consent group
        /// </param>
        /// <param name='consentGroupId'>
        /// The consent group to update
        /// </param>
        /// <param name='key'>
        /// The consent key being updated
        /// </param>
        /// <param name='request'>
        /// The details of consent being granted
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SaveConsentWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid consentGroupId, string key, ConsentRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Revoke consent
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription with access to the consent group
        /// </param>
        /// <param name='consentGroupId'>
        /// The consent group to revoked
        /// </param>
        /// <param name='key'>
        /// The consent key being revoked
        /// </param>
        /// <param name='member'>
        /// The consent group member revoking the consent
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteConsentWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid consentGroupId, string key, string member, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the details of consent granted to the member
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription with access to the consent group
        /// </param>
        /// <param name='consentGroupId'>
        /// The consent group to fetch
        /// </param>
        /// <param name='key'>
        /// The consent being requested
        /// </param>
        /// <param name='member'>
        /// The member retrieving consent
        /// </param>
        /// <param name='scopes'>
        /// An optional space separated list of scopes being requested. If
        /// specified, only these scopes are returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MemberConsentResponse>> GetMemberConsentWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid consentGroupId, string key, string member, string scopes = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all consent groups managed by the subscription
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription which owns the consent group
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ConsentGroupListResponse>>> GetAllConsentGroupsWithHttpMessagesAsync(System.Guid subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new consent group
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription responsible for managing this consent group
        /// </param>
        /// <param name='request'>
        /// The details of the consent group being created
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateConsentGroupWithHttpMessagesAsync(System.Guid subscriptionId, ConsentGroupRequest request = default(ConsentGroupRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the details of consent group managed by the subscription
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription which owns the consent group
        /// </param>
        /// <param name='consentGroupId'>
        /// The consent group to fetch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConsentGroupResponse>> GetConsentGroupWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid consentGroupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing consent group
        /// </summary>
        /// <param name='subscriptionId'>
        /// The subscription responsible for managing this consent group
        /// </param>
        /// <param name='consentGroupId'>
        /// The consent group to update
        /// </param>
        /// <param name='request'>
        /// The details of the consent group being updated
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateConsentGroupWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid consentGroupId, ConsentGroupRequest request = default(ConsentGroupRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
