// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Consent.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ConsentRequest
    {
        /// <summary>
        /// Initializes a new instance of the ConsentRequest class.
        /// </summary>
        public ConsentRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConsentRequest class.
        /// </summary>
        /// <param name="member">The key of the member requesting the creation
        /// of the consent</param>
        /// <param name="scopes">An optional list of scopes to grant consent
        /// to. By default all scopes are granted.</param>
        /// <param name="authorizedMembers">An optional list of member keys to
        /// grant consent to. By default all members are granted
        /// access.</param>
        public ConsentRequest(string member, IList<string> scopes = default(IList<string>), IList<string> authorizedMembers = default(IList<string>))
        {
            Member = member;
            Scopes = scopes;
            AuthorizedMembers = authorizedMembers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the key of the member requesting the creation of the
        /// consent
        /// </summary>
        [JsonProperty(PropertyName = "member")]
        public string Member { get; set; }

        /// <summary>
        /// Gets or sets an optional list of scopes to grant consent to. By
        /// default all scopes are granted.
        /// </summary>
        [JsonProperty(PropertyName = "scopes")]
        public IList<string> Scopes { get; set; }

        /// <summary>
        /// Gets or sets an optional list of member keys to grant consent to.
        /// By default all members are granted access.
        /// </summary>
        [JsonProperty(PropertyName = "authorizedMembers")]
        public IList<string> AuthorizedMembers { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Member == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Member");
            }
        }
    }
}
